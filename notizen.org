#+TITLE: Notizen zu meinem Archlinux Ansible Installationsskript
#+AUTHOR: Daniel Tschertkow <daniel.tschertkow@posteo.de>

* TODOs
** DONE git repo initiieren
** DONE Von dem Plan abweichen für die System-Partition ein LUKS-Keyfile (... nicht Ansible Keyfile) zu benutzen
** DONE Wo sollte man die Swapfile platzieren?
Auf ein eigenes btrfs subvolume, was nicht gesnapshotted wird, also z.B. /var/@swapfile
und einhängen unter /
→ nirgendwo!
** DONE Swap partition hinzufügen
** DONE Ein copy von vault Dateien entschlüsselt sie. Ändern!
versuche es mit der =decrypt: no= Option des =copy= Moduls
** DONE Das ganze Skript idempotent machen. Wäre schwer, aber geil
** DONE grub config: dmname setzen
siehe https://wiki.archlinux.org/index.php/Dm-crypt/System_configuration#Using_encrypt_hook

** DONE bootstrap_archlinux roles schreiben
Sie soll Archlinux auf der Systempartition installieren.
*** Pre condtitions
- eine live Umgebung ist eingerichtet
- die Festplatten sind wie gewünscht partitioniert, formatiert und ggf. verschlüsselt.
- alle Partitionen sind korrekt gemountet
*** Post condition
- arch ist auf der Systempartition installiert, aber es befindet sich kein Bootloader drauf
- das System weicht in keiner Weise von der absoluten Standardinstallation ab
** Post installation
*** System
**** DONE Firewall
**** DONE Laptop Power Saving
cpupower package
**** TODO Chrony für ntp
**** TODO hibernation button for shutdown
**** TODO automounts?

*** Desktop
**** TODO xorg
***** TODO Touchpad
* Notizen
** LUKS
*** Was ist ein LUKS Keyfile?
Ich will ein Laufwerk verschlüsseln. Dazu erstelle ich einen LUKS Container auf einer Partition auf dem Laufwerk. Ich muss ein Keyfile hinzufügen. Was ist dieses Keyfile?
Siehe https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#Keyfiles.
Im Keyfile steht einfach ein plain-text Passwort, unverschlüsselt. Damit das System zu verschlüsseln ist ohne weitere Vorkehrungen ungeeignet.
Probleme sind:
  - Keyfile muss selbst verschlüsselt werden, weil das System ansonsten direkt entschlüsselt wird, was den Zweck zunichte macht. Das kann z.B. mit GPG und irgendwelchen =mkdinitcpio= Hooks eingerichtet werden, aber letztendlich landet wieder bei einem Passwort, dass man sich merken muss.
  - Die Datei kann unbrauchbar gemacht werden, sodass man es selbst auch nicht entschlüsseln kann.
Vorteile sind:
  - Entfernt man den Key, ist die Platte wirklich nicht mehr entschüsselbar. Keyspace ist viel viel größer.
*** Wie erstellt man eine LUKS Keyfile?
Man generiert einen zufällige Zeichenkette und schreibt sie in eine Datei, z.B. mit dd:
=dd if=/dev/urandom of=/root/keyfile bs=1024 count=4=
Diese Datei sollte nicht einfach so rumliegen, daher noch mit GPG verschlüsseln.
*** Wie fügt man Keyfiles zu LUKS hinzu?
Entweder mit den cli Tools (=cryptsetup=), oder mit Ansible =luks_device=. Hier ist =state: present= und =keyfile: my-key= wichtig.
Anschließend öffnen mit =state: opened=. Hier ist ein einzigartiger Name ganz gut.
*** Wie öffnet man ein LUKS Container und greift drauf zu?
=cryptsetup open /dev/sda1 foocrypt=.
Seine neue udev Adresse ist =/dev/mapper/foocrypt=
*** Wie fügt man sie zu =/etc/crypttab= hinzu?
- per Hand
- per Template
- per Ansible =crypttab=
*** =luks_device= braucht eine lokale Keyfile
 Datei wird nicht von cryptsetup gefunden, weil sie auf dem System nicht existiert!
 Sie müsste eigentlich rüberkopiert werden, mit copy nach /tmp/ansible/vault ... oder so.
*** Wie teste ich, dass ein Passwort in LUKS vorhanden ist?
=cryptsetup luksOpen= allows to specify =--test-passphrase=, in which case also no destination is needed: =cryptsetup luksOpen --test-passphrase /dev/sda1= returns exit code 0 if the passphrase is correct, and other exit codes on errors. Looking for No key available with this passphrase (or whatever else it says, depending on the version) should make this a proper test.

** Ansible
*** =./ansible.cfg= ist mein Freund
*** Kann Ansible =luks_device= auch LUKS1?
Ja, und bisher nur das. Ein Github Issue befasst sich mit der Frage: https://github.com/ansible/ansible/issues/58973
*** Sind host_vars/ und group_vars/ eigentlich auch yml Dateien?
Ja, sind sie!
https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#splitting-out-vars
*** Wie erstellt man mit Ansible ein Dateisystem?
=filesystem=
*** Tasks in andere Tasks importieren
Ja, das geht problemlos, wie man am Beispiel vom =main.yml= sehen kann. Dazu einfach =include_tasks= oder sogar =import_tasks= benutzen.
*** Für Variablen, die in einzelnen Tasks gelten
Können einfach in einem Block mit =block= definiert werden. Man könnte es auch beim =include_tasks= mit =vars:= versuchen.
*** Ansible variable precedence (lowest to highest priority):

        command line values (eg “-u user”)
        role defaults [1]
        inventory file or script group vars [2]
        inventory group_vars/all [3]
        playbook group_vars/all [3]
        inventory group_vars/* [3]
        playbook group_vars/* [3]
        inventory file or script host vars [2]
        inventory host_vars/* [3]
        playbook host_vars/* [3]
        host facts / cached set_facts [4]
        play vars
        play vars_prompt
        play vars_files
        role vars (defined in role/vars/main.yml)
        block vars (only for tasks in block)
        task vars (only for the task)
        include_vars
        set_facts / registered vars
        role (and include_role) params
        include params
        extra vars (always win precedence)

*** Ansible Variablen benutzen nur Buchstaben, Zahlen und Unterstriche. Sie müssen mit einem Buchstaben beginnen
*** read file content
z.B. für =debug=: ={{ lookup('file', luks_keyfile) }}=. =luks_keyfile= ist dabei auch eine Variable
*** Werte von Parametern dürfen nicht mit {{ .. }} beginnen.
Sie sollten in Anführungszeichen stehen.
device: {{ device }} geht nicht
device: "{{ device }}" geht
*** zu jedem Task / Modulaufruf kann erweitert werden
z.B. durch
  - Kondition: =when:= ...
  - Neue, zugreifbare Variable: =register: myvar=
*** =register= registriert den gesamten Output
mit =var.subvar= kann auf die einzelnen Felder zugegriffen werden.

*** mehrere Module unter einem Yaml Listenelent gehen nicht
Konstrukte wie:
#+BEGIN_SRC
- name: von mehreren Modulen wird nur das letzte ausgeführt
  command: ls            ; wird ignoriert
  command: cd            ; wird ignoriert
  command: mkdir /hallo  ; wird ausgeführt
#+END_SRC
*** Task level vars:
Ein Task:
#+BEGIN_SRC
- name: create btrfs flat layout and mount it the btrfs way
  include_tasks: ./roles/setup_arch_base/tasks/btrfs-layout-flat/create.yml
  vars:
    device: "/dev/mapper/{{ inventory_hostname }}_{{ luks_syspart_name}}"
    mountpoint: "{{ sys_mount }}"
#+END_SRC
Mehrere Tasks:
#+BEGIN_SRC
- name: create btrfs flat layout and mount it the btrfs way
  block:
    - include_tasks: ./roles/setup_arch_base/tasks/btrfs-layout-flat/create.yml
    - include_tasks: ./roles/setup_arch_base/tasks/btrfs-layout-flat/mount.yml
  vars:
    device: "/dev/mapper/{{ inventory_hostname }}_{{ luks_syspart_name}}"
    mountpoint: "{{ sys_mount }}"

#+END_SRC
*** gahter_facts in der Kommandozeile
ansible -m setup <host in inv>
*** Wie schreibt man eine Handler?
Für eine Änderung (="changed": true=) eines Tasks:
#+BEGIN_SRC
- name: "set /etc/hostname on live-env"
  template:
    src: hostname.j2
    dest: "/etc/hostname"
  notify: lock hostname
#+END_SRC

kann man z.B. in =handlers/main.yml= hinterlassen:
#+BEGIN_SRC
- name: lock hostname
  command: hostname -F /etc/hostname
#+END_SRC
=notify= und =name= müssen das Gleiche beinhalten
*** Präszisere Abbruchbedingungen mit =failed_when=
man kann mit der Bedingung =failed_when= in Kombination mit =register= sehr genau Fehlerkonditionen festlegen.  Besonders interessant: Der =in= Operator:
#+BEGIN_SRC
- name: Check if a file exists in temp and fail task if it does
  command: ls /tmp/this_should_not_be_here
  register: result
  failed_when:
    - result.rc == 0
    - '"No such" not in result.stdout'
#+END_SRC
*** Beeinflussen, wann etwas als ="changed"= gilt
Für bessere Reports:
Bedingung =changed_when:= erlaubt in Kombination mit =register= eine genauere Festlegung der Änderungsbedingung.

*** man kann Jinja2 Variablen innerhalb von Variablen benutzen:
=msg: '{{ "{{rootpw}}" | password_hash("sha512")}}'=
*** Conditionally set variables in e.g /host_vars
=system_part: "{{ '/dev/sda2' if use_swapfile else '/dev/sda3' }}"=
*** Conditionally execute roles in Playbook
mit roles: role: when
#+BEGIN_SRC
- hosts: arch_desktops
  user: root
  roles:
    - role: partition_efi
      when: use_efi

#+END_SRC
*** connection test mit =setup= module
=ansible -m setup -i inventory all=
'all' ist hier das Pattern für die Hosts für die das Modul ausgeführt werden soll


** Linux
*** will man irgendwas auf /home mounten, dann muss der Ordner bereits existieren
*** Muss die efi Partition in fstab gemounted werden?
** btrfs
*** Subvolumes sind einerseits wie Ordner, andererseite wie Dateisysteme
→ sie können gemountet werden.
Nested Subvolumes können einfach in Verzeichnissen eines anderen Subvolumes erstellt werden.

** Entscheidungen
*** Muss swap verschlüsselt werden?
Ja, weil Programme Passwörter im Speicher haben können, die vom Scheduler bei Bedarf in den Swap geschrieben werden. Wenn es auf der Festplatte liegt, kann es wiederhergestellt werden.
*** Wie kann man verschlüsselten Swap realisieren?
=luks_device= stellt keine Möglichkeit bereit, den Typ der Verschlüsselung zu wählen. Daher ist es umständlich per Ansible ein Swap mit plain encryption zu erstellen.
**** Mögliche Realisierung:
***** btrfs subvolume mit einer swap file auf system partition erstellen
Voraussetzungen: Linux Kernel 5.0+
Einschränkungen: Kann nicht auf einem subvolume liegen, von dem Snapshots erstellt werden, oder der mehrere Platten umfasst.

Schritte:
1. Subvolume für Swap erstellen, der nicht gesnapshotted wird: https://wiki.archlinux.org/index.php/Btrfs#Creating_a_subvolume
2. Swapfile der Größe 0B erstellen:
   =truncate -s 0 /swapfile=
3. Copy-on-Write ausschalten:
   =chattr +C /swapfile=
4. Kompression ausschalten:
   =btrfs property set /swapfile compression none=
5. Und dann die normalen Swapfile Schritte durchführen, also =fallocate /swapfile=, =chmod=, =mkswap=, =swapon= und in =/etc/fstab= speichern

***** swap partition in /etc/crypttab eintragen und beim Herunterfahren verschlüsseln
ist sehr einfach und es bleibt nichts übrig.
 Wie mache ich das? Es braucht einfach nur einen Eintrag mit Ansible =crypttab=
*** Sollte man Partitionierung und sein entsprechendes Mounting entkoppeln?
Man hat sich für ein Partitionslayout entschieden. Dieses Layout muss an die entsprechenden Orte eingehängt werden. Die Erstellung des Layouts passiert einmalig, das korrekte Einhängen passiert hingegen mehrmals. Trotzdem sind sie eng gekoppelt.
Nicht entkoppeln, sondern folgendermaßen in Dateien trennen und sie in einen Unterordner ablegen:

#+BEGIN_SRC:
the_task/
  |
  |-- main.yml and others
  \-- btrfs-layout-flat/
        |
        |-- create.yml
        |-- mount.yml
        \-- umount.yml
#+END_SRC
Wichtig ist, dass =create.yml= sein eigenes, einmaliges Mount und Unmount zur Erstellung des Dateisystems auf dem /richtigen/ Device hat. =btrfs_layout_flat= sollte agnostisch gegenüber dem *Mountpoint* und dem *Device* sein. Das sollte vorher in Variablen deklariert werden.
*** Wie sollte ich =/etc/fstab= handhaben?
**** Ansible =mount= Modul
- Enge Kopplung zwischen Mounting und Anpassung von =/etc/fstab=.
- Keine Unterscheidung zwischen einmaligem Mounten und permanentem Mounten
+ Einträge sind korrekt
+ Einträge sind verträglich mit bestehenden Einträgen
**** Ansible template
+ Mount und =/etc/fstab= entkoppelt
  → Unterscheidung zwischen einmaligem Mounten und permanentem Mounten
- Korrekte Einträge müssen von Hand erstellt und getestet werden
- Einträge, die durch anderweitige Vorgänge erstellt wurden, werden ignoriert
+ Deterministisch
**** arch =genfstab=?

→ Ich entscheide mich für Template

pacstrap erstellt auch ein =/etc/fstab=. Sollte nach pacstrap erstellt werden.
Ist halb an das Partitionslayout gekoppelt. Das btrfs-layout bestimmt einige Mounts, andere hingegen sind fest (swap und efi).

***** Trennen oder mehrere Templates für jeden Fall?
... mehrere Templates, eine für jeden Fall
*** Wie boote ich in ein verschlüsseltes System?
Bei EFI-Boot liegt der Bootloader in der speziellen EFI Partition. Sie ist unverschlüsselt. So kann die UEFI-Firmware des Motherboards den Bootloader laden. Anschließend muss der Bootloader das Kernel-Image in den Speicher laden und den Kernel ausführen. Der Bootloader meiner Wahl ist GRUB.

**** Mein /boot ist verschlüsselt. What do?
Bei der Installation von GRUB kann sein =core.img= mit einem Modul für das Entschlüsseln des Laufwerks ausgestattet werden. GRUB wird, bevor er =/boot= findet, nach der LUKS Passphrase fragen und anschließend die komplette System-Partition entschlüsseln. Das ist alles, was ich will. =/boot= liegt in einem btrfs Dateisystem (subvol @). Kann GRUB das lesen? Ja, ohne Probleme.

**** /etc/default/grub
=GRUB_ENABLE_CRYPTODISK=y= und =GRUB_CMDLINE_LINUX_DEFAULT= auf ="cryptdevice={{ system_part }} loglevel=3 quiet"= setzen.

**** /etc/mkinitcpio.conf
Konfiguriert die Ausführung des Arch Linux spezifischen Skripts: =mkinitcpio=.
Dieses Skript bestimmt die Erstellung des Initramfs Images, welches den Kernel und das erste in-memory Dateisystem beinhaltet und vom Bootloader entpackt und in den RAM geladen wird. Typischerweise liegt dieses Kernel Image im =/boot= Verzeichnis.

=encrypt= Hook setzen und /usr/bin/btrfs als Binary hinzufügen.

**** crypttab zum Verschlüsseln von Swap erstellen.

*** Sollte ich eine zentrale Stelle für Software haben, oder eher nach Programm Installation und Konfiguration verbinden?
| zentral                     | install+config                                      |
|-----------------------------+-----------------------------------------------------|
| + zentrale Stelle für alles | + Installation und Konfiguration ist verknüpft,     |
| - Konfig ohne dass Software | so auch im Code, zentrale Stelle immer noch möglich |
|   installiert ist           |                                                     |

→ install+config.
Präfix wird sein: archpkg_
